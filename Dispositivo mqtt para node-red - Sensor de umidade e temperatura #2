import network
import time
from umqtt.simple import MQTTClient
import dht
import ujson
from machine import Pin

ssid = ""
password = ""

mqtt_broker = "test.mosquitto.org"
mqtt_port = 1883
mqtt_topic = ""

termostato = dht.DHT11(Pin(33))  

wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(ssid, password)
while not wlan.isconnected():
    time.sleep(1)

client = MQTTClient("esp32_temp", mqtt_broker, mqtt_port)
client.connect()

client.publish(
    mqtt_topic, "WIFI e Broker Conectados! IP: {}".format(wlan.ifconfig()[0]).encode()
)

try:
    while True:
        
        termostato.measure()  
        temperatura = termostato.temperature() 
        umidade = termostato.humidity()  
        
        payload = {
            "temperatura": temperatura,
            "umidade": umidade
        }
        
        payload_json = ujson.dumps(payload)
        client.publish(mqtt_topic, payload_json.encode())
        
        time.sleep(5)  

except KeyboardInterrupt:
    client.publish(mqtt_topic, "Programa interrompido.".encode())

finally:
    client.disconnect()


#########################################################################

var temp = parseFloat(msg.payload.temperatura);
var umR = parseFloat(msg.payload.umidade);
var HI;
var tempF = (temp * 9 / 5) + 32;

HI = 0.5 * (tempF + 61.0 + ((tempF - 68.0) * 1.2) + (umR * 0.094));
if (HI > 79) {
    HI = -42.379 + 2.04901523 * tempF + 10.14333127 * umR - 0.22475541 * tempF * umR - 0.00683783 * tempF * tempF - 0.05481717 * umR * umR + 0.00122874 * tempF * tempF * umR + 0.00085282 * tempF * umR * umR - 0.00000199 * tempF * tempF * umR * umR;
    if ((umR <= 13) && ((tempF >= 80) && tempF <= 112)) {
        HI -= ((13 - umR) / 4) * Math.sqrt((17 - Math.abs(tempF - 95.)) / 17);
    }
    if ((umR > 85) && ((tempF >= 80) && tempF <= 87)) {
        HI += ((umR - 85) / 10) * ((87 - tempF) / 5);
    }
}
var ic = (HI - 32) / 1.8;

var icArredondado = ic.toFixed(0);

return [{
    payload: {
        temperatura: temp.toFixed(0),
        umidade: umR.toFixed(0),
        ic: icArredondado
    }
}];
